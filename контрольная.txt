1.в c# память разделяется на стек и кучу.в стеке хранятся локальные переменные и временные данные во время выполнения метода.в куче хранятся динамически создаваемые объекты.
2.в c# есть несколько типов данных например:целочисленные,с плавающей запятой,символьные,логические,указатели.хранятся в стеке и куче
3.упаковка-это преобразование простого типа(int,double и др)в тип object.распаковка-это процесс извлечения первоначального объекта из object
4.класс-это шаблон,описывающий,каким будет объект.объект-это экземпляр класса.он создается на основе класса.объект может вызывать методы класса
5.нет,но поддерживается множественная реализация интерфейсов
6.try-catch-finally.это конструкция которая помогает вызывать исключения.мы пишем код в try,затем если все хорошо,выполняется finally.если код сломался,отрабатывает catch и бросается исключение,так же отрабатывает finally.
7.finally выполнится в любом случае
8.передача по значению,передача при помощи модификаторов ref,out,in
9.var помогает определять переменные с неявным типом
10.абстракция,инкапсуляция,наследование,полиморфизм
11.принцип единственной ответственности,принцип открытости\закрытости,принцип подстановки Лисков,принцип разделения интерфейса,принцип инверсии зависимостей
12.абстрактный класс:наследуется,можно объявлять переменные
   интерфейс:реализуется,только статические члены,нельзя объявлять переменные,так же доступно множественная реализация
13.Delegate:— это обобщенный тип, который может ссылаться на методы с определенной сигнатурой (параметры и возвращаемое значение).Он позволяет создавать пользовательские делегаты для обратного вызова методов.
Action: — это обобщенный делегат, который представляет метод, не возвращающий значение (тип void).Он используется для выполнения действий без возврата результата.
Func:— это обобщенный делегат, который представляет метод, возвращающий значение.Он может принимать от 0 до 16 параметров и возвращает результат.
Predicate:— это обобщенный делегат, который представляет метод, возвращающий булевское значение (true или false).Он часто используется для сравнения или проверки условий.
14.ToString():служит для получения строкового представления данного объекта.
GetHashCode():возвращает числовое значение (хэш-код), которое соответствует данному объекту.
GetType(): позволяет получить тип данного объекта.
Equals():позволяет сравнить два объекта на равенство.
15.Конструкция using в C# используется для управления ресурсами, такими как файлы, сетевые соединения, базы данных и другие объекты, которые реализуют интерфейс IDisposable. Она обеспечивает автоматическое освобождение ресурсов по завершении блока кода, даже если возникло исключение.
16.мьютексы,семафоры,критические секции,события,условные переменные,spin locks,read-write locks
17.ограничение ссылочного типа,ограничение типа значений,ограничение на базовый класс,ограничение на интерфейс,ограничение на конструктор
18.typeof:это оператор, который получает тип, известный на этапе компиляции (или хотя бы обобщенный параметр типа).
Операнд typeof всегда представляет имя типа или обобщенного параметра типа, но никогда не выражение с значением (например, переменную).
GetType():это метод, вызываемый на объекте во время выполнения программы.Он возвращает объект типа System.Type, содержащий информацию о типе данного объекта.
19.да,можно
20.Асинхронность — это способность программы выполнять несколько задач одновременно без блокировки.
   Параллельность — это выполнение нескольких задач одновременно на разных процессорах